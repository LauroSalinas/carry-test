;; Analyzed by ClojureScript 1.8.51
{:use-macros {reaction reagent.ratom, match cljs.core.match}, :excludes #{}, :name counter.core, :imports nil, :requires {cljs.core.match cljs.core.match}, :uses nil, :defs {-initial-model {:name counter.core/-initial-model, :file "src-spec\\counter\\core.cljs", :line 7, :column 1, :end-line 7, :end-column 20, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\examples\\counter\\src-spec\\counter\\core.cljs", :line 7, :column 6, :end-line 7, :end-column 20}}, -control {:protocol-inline nil, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\examples\\counter\\src-spec\\counter\\core.cljs", :line 12, :column 7, :end-line 12, :end-column 15, :arglists (quote ([model signal _dispatch-signal dispatch-action]))}, :name counter.core/-control, :variadic false, :file "src-spec\\counter\\core.cljs", :end-column 15, :method-params ([model signal _dispatch-signal dispatch-action]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 4, :fn-var true, :arglists (quote ([model signal _dispatch-signal dispatch-action]))}, -reconcile {:protocol-inline nil, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\examples\\counter\\src-spec\\counter\\core.cljs", :line 42, :column 7, :end-line 42, :end-column 17, :arglists (quote ([model action]))}, :name counter.core/-reconcile, :variadic false, :file "src-spec\\counter\\core.cljs", :end-column 17, :method-params ([model action]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([model action]))}, view-model {:protocol-inline nil, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\examples\\counter\\src-spec\\counter\\core.cljs", :line 53, :column 7, :end-line 53, :end-column 17, :arglists (quote ([model]))}, :name counter.core/view-model, :variadic false, :file "src-spec\\counter\\core.cljs", :end-column 17, :method-params ([model]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([model]))}, show-time {:protocol-inline nil, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\examples\\counter\\src-spec\\counter\\core.cljs", :line 61, :column 7, :end-line 61, :end-column 16, :arglists (quote ([date]))}, :name counter.core/show-time, :variadic false, :file "src-spec\\counter\\core.cljs", :end-column 16, :method-params ([date]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([date]))}, view {:protocol-inline nil, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\examples\\counter\\src-spec\\counter\\core.cljs", :line 75, :column 7, :end-line 75, :end-column 11, :arglists (quote ([{:keys [counter timer bvalue clock], :as _view-model} dispatch]))}, :name counter.core/view, :variadic false, :file "src-spec\\counter\\core.cljs", :end-column 11, :method-params ([p__26261 dispatch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [counter timer bvalue clock], :as _view-model} dispatch]))}, spec {:name counter.core/spec, :file "src-spec\\counter\\core.cljs", :line 108, :column 1, :end-line 108, :end-column 10, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\examples\\counter\\src-spec\\counter\\core.cljs", :line 108, :column 6, :end-line 108, :end-column 10}}}, :require-macros {reagent.ratom reagent.ratom, cljs.core.match cljs.core.match}, :cljs.analyzer/constants {:seen #{:change-value :on-increment-async :increment :on-increment-if-odd :timer :on-decrement :else :inc-time :initial-model :button :value :val :type :on-increment :on-click :div :bvalue :counter :on-stop :control :clock-time :set-clock :clock :box-value :decrement :input :reconcile :h1 :on-change :p :thetime :on-start}, :order [:val :thetime :box-value :clock-time :else :on-increment-async :increment :on-increment-if-odd :on-decrement :decrement :on-increment :on-stop :on-start :inc-time :set-clock :change-value :counter :timer :bvalue :clock :h1 :p :button :on-click :div :input :type :value :on-change :initial-model :control :reconcile]}, :doc nil}