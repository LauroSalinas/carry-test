;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name app.core, :imports nil, :requires {counter counter.core, counter.core counter.core, carry carry.core, carry.core carry.core, carry-reagent carry-reagent.core, carry-reagent.core carry-reagent.core, r reagent.core, reagent.core reagent.core}, :uses nil, :defs {main {:protocol-inline nil, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\examples\\counter\\src\\app\\core.cljs", :line 9, :column 7, :end-line 9, :end-column 11, :arglists (quote ([]))}, :name app.core/main, :variadic false, :file "src\\app\\core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, app {:name app.core/app, :file "src\\app\\core.cljs", :line 17, :column 1, :end-line 17, :end-column 9, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\examples\\counter\\src\\app\\core.cljs", :line 17, :column 6, :end-line 17, :end-column 9}}, before-jsload {:protocol-inline nil, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\examples\\counter\\src\\app\\core.cljs", :line 20, :column 7, :end-line 20, :end-column 20, :arglists (quote ([]))}, :name app.core/before-jsload, :variadic false, :file "src\\app\\core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, on-jsload {:protocol-inline nil, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\examples\\counter\\src\\app\\core.cljs", :line 24, :column 7, :end-line 24, :end-column 16, :arglists (quote ([]))}, :name app.core/on-jsload, :variadic false, :file "src\\app\\core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {r reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:dispatch-signal :on-stop :view-model :on-start}, :order [:dispatch-signal :on-start :view-model :on-stop]}, :doc nil}