;; Analyzed by ClojureScript 1.8.51
{:use-macros {reaction reagent.ratom}, :excludes #{}, :name carry-reagent.core, :imports nil, :requires {carry carry.core, carry.core carry.core, r reagent.core, reagent.core reagent.core}, :uses nil, :defs {connect {:protocol-inline nil, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\examples\\counter\\..\\..\\contrib\\reagent\\src\\carry_reagent\\core.cljs", :line 6, :column 7, :end-line 6, :end-column 14, :arglists (quote ([{:keys [model dispatch-signal], :as _app} view-model view])), :doc "Arguments:\n\n  * `app` - the app for which UI should be created\n  * `view-model` - function which, given a read-only model ratom, returns reactions (e.g. in a map); returned value will be passed to `view`\n  * `view` - Reagent component function with args: `[view-model dispatch-signal]`\n\n  Note that `view-model` function will be called only once.\n\n  Returns a pair of: view-model value (mostly for testing/debugging) and argless component to be rendered by Reagent."}, :name carry-reagent.core/connect, :variadic false, :file "..\\..\\contrib\\reagent\\src\\carry_reagent\\core.cljs", :end-column 14, :method-params ([p__20204 view-model view]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [model dispatch-signal], :as _app} view-model view])), :doc "Arguments:\n\n  * `app` - the app for which UI should be created\n  * `view-model` - function which, given a read-only model ratom, returns reactions (e.g. in a map); returned value will be passed to `view`\n  * `view` - Reagent component function with args: `[view-model dispatch-signal]`\n\n  Note that `view-model` function will be called only once.\n\n  Returns a pair of: view-model value (mostly for testing/debugging) and argless component to be rendered by Reagent."}, track-keys {:protocol-inline nil, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\examples\\counter\\..\\..\\contrib\\reagent\\src\\carry_reagent\\core.cljs", :line 23, :column 7, :end-line 23, :end-column 17, :arglists (quote ([map-ratom keyseq])), :doc "Returns a map containing reactions to map entries specified by keys."}, :name carry-reagent.core/track-keys, :variadic false, :file "..\\..\\contrib\\reagent\\src\\carry_reagent\\core.cljs", :end-column 17, :method-params ([map-ratom keyseq]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([map-ratom keyseq])), :doc "Returns a map containing reactions to map entries specified by keys."}}, :require-macros {reagent.ratom reagent.ratom, r reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:dispatch-signal :model}, :order [:model :dispatch-signal]}, :doc nil}