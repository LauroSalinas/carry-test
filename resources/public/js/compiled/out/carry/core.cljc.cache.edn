;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name carry.core, :imports nil, :requires nil, :uses nil, :defs {read-only? {:protocol-inline nil, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\src\\carry\\core.cljc", :line 4, :column 7, :end-line 4, :end-column 17, :arglists (quote ([a])), :doc "Returns `true` if atom `a` is read-only."}, :name carry.core/read-only?, :variadic false, :file "D:\\Clojure\\carry-master\\carry-master\\src\\carry\\core.cljc", :end-column 17, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Returns `true` if atom `a` is read-only."}, -throw-read-only-atom-error {:no-doc true, :protocol-inline nil, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\src\\carry\\core.cljc", :line 9, :column 16, :end-line 9, :end-column 43, :no-doc true, :arglists (quote ([new-state]))}, :name carry.core/-throw-read-only-atom-error, :variadic false, :file "D:\\Clojure\\carry-master\\carry-master\\src\\carry\\core.cljc", :end-column 43, :method-params ([new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([new-state]))}, set-read-only! {:protocol-inline nil, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\src\\carry\\core.cljc", :line 14, :column 7, :end-line 14, :end-column 21, :arglists (quote ([a])), :doc "Makes the specified atom read-only: an excpetion will be raised after atom value is changed.\n  Returns the updated atom."}, :name carry.core/set-read-only!, :variadic false, :file "D:\\Clojure\\carry-master\\carry-master\\src\\carry\\core.cljc", :end-column 21, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Makes the specified atom read-only: an excpetion will be raised after atom value is changed.\n  Returns the updated atom."}, -set-can-be-set-only-to-value! {:no-doc true, :protocol-inline nil, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\src\\carry\\core.cljc", :line 25, :column 16, :end-line 25, :end-column 46, :no-doc true, :arglists (quote ([a v])), :doc "Allows swap!/reset! only to the specified value. Returns the updated atom."}, :name carry.core/-set-can-be-set-only-to-value!, :variadic false, :file "D:\\Clojure\\carry-master\\carry-master\\src\\carry\\core.cljc", :end-column 46, :method-params ([a v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a v])), :doc "Allows swap!/reset! only to the specified value. Returns the updated atom."}, -reset-read-only-atom! {:no-doc true, :protocol-inline nil, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\src\\carry\\core.cljc", :line 34, :column 16, :end-line 34, :end-column 38, :no-doc true, :arglists (quote ([a new-value])), :doc "Bypasses write protection of the specified read-only atom."}, :name carry.core/-reset-read-only-atom!, :variadic false, :file "D:\\Clojure\\carry-master\\carry-master\\src\\carry\\core.cljc", :end-column 38, :method-params ([a new-value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a new-value])), :doc "Bypasses write protection of the specified read-only atom."}, app {:protocol-inline nil, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\src\\carry\\core.cljc", :line 48, :column 7, :end-line 48, :end-column 10, :arglists (quote ([{:keys [initial-model control reconcile], :as _spec}])), :doc "Constructs an app from a spec map with keys:\n\n  * `:initial-model` - Initial model value, must be a map.\n  * `:control` - Function of args: `[model signal dispatch-signal dispatch-action]`.\n  It performs side effects, can dispatch actions and new signals.\n  By convention, it must be able to handle `:on-start` and `:on-stop` signals in order to be wrappable by middleware.\n  Read-only model atom is useful for reading actual model values in async code and to subscribe to model changes.\n  Functions `dispatch-signal` and `dispatch-action` always return `nil`.\n  * `:reconcile` - Pure function of args: `[model action]`.\n  Given an action and current model value, it must return the new model value.\n\n  Returns a map with keys:\n\n  * `:model` - A read-only model atom.\n  * `:dispatch-signal` - Function with a single arg: a signal to be sent to an app. Returns `nil`."}, :name carry.core/app, :variadic false, :file "D:\\Clojure\\carry-master\\carry-master\\src\\carry\\core.cljc", :end-column 10, :method-params ([p__19484]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [initial-model control reconcile], :as _spec}])), :doc "Constructs an app from a spec map with keys:\n\n  * `:initial-model` - Initial model value, must be a map.\n  * `:control` - Function of args: `[model signal dispatch-signal dispatch-action]`.\n  It performs side effects, can dispatch actions and new signals.\n  By convention, it must be able to handle `:on-start` and `:on-stop` signals in order to be wrappable by middleware.\n  Read-only model atom is useful for reading actual model values in async code and to subscribe to model changes.\n  Functions `dispatch-signal` and `dispatch-action` always return `nil`.\n  * `:reconcile` - Pure function of args: `[model action]`.\n  Given an action and current model value, it must return the new model value.\n\n  Returns a map with keys:\n\n  * `:model` - A read-only model atom.\n  * `:dispatch-signal` - Function with a single arg: a signal to be sent to an app. Returns `nil`."}, entangle {:protocol-inline nil, :meta {:file "D:\\Clojure\\carry-master\\carry-master\\src\\carry\\core.cljc", :line 73, :column 7, :end-line 73, :end-column 15, :arglists (quote ([a f] [a f constructor])), :doc "Returns a read-only atom which automatically syncs its value from `(f @a)`.\n   Arguments:\n\n   * `f` - pure function\n   * `a` - atom\n   * `contructor` - atom contructor, default value: `atom`", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a f] [a f constructor]), :arglists ([a f] [a f constructor]), :arglists-meta (nil nil)}}, :name carry.core/entangle, :variadic false, :file "D:\\Clojure\\carry-master\\carry-master\\src\\carry\\core.cljc", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a f] [a f constructor]), :arglists ([a f] [a f constructor]), :arglists-meta (nil nil)}, :method-params ([a f] [a f constructor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 3, :fn-var true, :arglists ([a f] [a f constructor]), :doc "Returns a read-only atom which automatically syncs its value from `(f @a)`.\n   Arguments:\n\n   * `f` - pure function\n   * `a` - atom\n   * `contructor` - atom contructor, default value: `atom`"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:carry.core/read-only-watch :initial-model :carry.core/read-only-atom? :dispatch-signal :control :reconcile :carry.core/can-be-reset-only-to-value-watch :model}, :order [:carry.core/read-only-atom? :carry.core/read-only-watch :carry.core/can-be-reset-only-to-value-watch :initial-model :control :reconcile :model :dispatch-signal]}, :doc nil}